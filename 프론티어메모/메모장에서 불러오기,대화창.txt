#include <stdio.h>
#include <SFML/Graphics.hpp>
#include <stdlib.h>
#include <time.h>
#include <SFML/Audio.hpp>
#include <iostream>
#include <fstream>
#include <string>
#include <locale> // 한글 지원
using namespace std;
using namespace sf;

struct Textures {
    Texture title_bg;

    Texture start_btn_def;
    Texture quit_btn_def;
    Texture start_btn_sel;
    Texture home_bg;

    Texture start_btn_prs;
    Texture quit_btn_sel;
    Texture quit_btn_prs;

    Texture main_ch_front_x;
    Texture main_ch_right_x;
    Texture main_ch_left_x;
    Texture main_ch_back_x;

    Texture main_ch_front_o;
    Texture main_ch_right_o;
    Texture main_ch_left_o;
    Texture main_ch_back_o;

    Texture dialogbox;

};


struct Box {
    RectangleShape sprite;
};

struct Button {
    RectangleShape sprite;
};

struct Player {
    RectangleShape sprite;
    int speed;
};

struct Map {
    RectangleShape sprite;
};

const int W_WIDTH = 1920, W_HEIGHT = 1080;
const int Map_WIDTH = 150, Map_HEIGHT = 150;
const int TILE_WIDTH = 12, TILE_HEIGHT = 7;

int main(void) {
    


    long long a = 0;

    clock_t start = clock();

    for (int i = 0; i < 10000; i++) {
        for (int j = 0; j < 100000; j++) {
            a++;
        }
    }

    clock_t end = clock();

    cout << "플레이 타임 : " << double(end - start) / CLOCKS_PER_SEC;



    Vector2i mouse_pos;
    int layer = 0;
    int hand = 0;

    //시점 고정
    View view;
    view.setCenter(Vector2f(W_WIDTH / 2, W_HEIGHT / 2));
    view.setSize(Vector2f(W_WIDTH, W_HEIGHT));

    //사진 로드
    struct Textures tex;
    tex.title_bg.loadFromFile("./resource/images/background/title_img.png");
    tex.home_bg.loadFromFile("./resource/images/background/map_home.png");

    tex.start_btn_def.loadFromFile("./resource/images/btn/title_start_default.png");
    tex.start_btn_sel.loadFromFile("./resource/images/btn/title_start_selected.png");
    tex.start_btn_prs.loadFromFile("./resource/images/btn/title_start_pressed.png");
    tex.quit_btn_def.loadFromFile("./resource/images/btn/title_exit_default.png");
    tex.quit_btn_sel.loadFromFile("./resource/images/btn/title_exit_selected.png");
    tex.quit_btn_prs.loadFromFile("./resource/images/btn/title_exit_pressed.png");

    tex.main_ch_front_x.loadFromFile("./resource/images/character/main_ch/ch_f_x.png");
    tex.main_ch_right_x.loadFromFile("./resource/images/character/main_ch/ch_r_x.png");
    tex.main_ch_left_x.loadFromFile("./resource/images/character/main_ch/ch_l_x.png");
    tex.main_ch_back_x.loadFromFile("./resource/images/character/main_ch/ch_b_x.png");

    tex.main_ch_front_o.loadFromFile("./resource/images/character/main_ch/ch_f_o.png");
    tex.main_ch_right_o.loadFromFile("./resource/images/character/main_ch/ch_r_o.png");
    tex.main_ch_left_o.loadFromFile("./resource/images/character/main_ch/ch_l_o.png");
    tex.main_ch_back_o.loadFromFile("./resource/images/character/main_ch/ch_b_o.png");
    
    tex.dialogbox.loadFromFile("./resource/images/box/dialogbox.png");

    RenderWindow window(VideoMode(W_WIDTH, W_HEIGHT), "Frontier");
    window.setFramerateLimit(60);

    //배경
    //struct Map map[Map_WIDTH][Map_HEIGHT];
    //for (int i = 0; i < Map_WIDTH; i++) {
    //   for (int j = 0; j < Map_HEIGHT; j++) {
    //      map[i][j].sprite.setTexture(&tex.home_bg);
    //      map[i][j].sprite.setPosition(0 + (i * TILE_WIDTH), 0 + (j * TILE_HEIGHT));
    //      map[i][j].sprite.setSize(Vector2f(150, 150));
    //   }
    //}
    Sprite dialogbox;
    dialogbox.setTexture(tex.dialogbox);
    dialogbox.setColor(sf::Color(255, 255, 255, 128));

    Sprite title;
    title.setTexture(tex.title_bg);
    title.setPosition(0, 0);

    Sprite home;
    home.setTexture(tex.home_bg);
    home.setPosition(0, 0);

    //플레이어
    struct Player player;
    player.sprite.setTexture(&tex.main_ch_front_x);
    player.sprite.setSize(Vector2f(150, 150));
    player.sprite.setPosition(W_WIDTH / 2 - 75, W_HEIGHT / 2 - 75);
    player.speed = 9;

    //폰트불러오기
    sf::Font font;
    if (!font.loadFromFile("arial.ttf"))//프로젝트와 같은 폴더에 위치
    {
        std::cerr << "Failed to load font file" << std::endl;
        return 1;
    }
    // 텍스트 출력용 객체 생성
    sf::Text text;
    text.setFont(font);
    text.setCharacterSize(24);
    text.setFillColor(sf::Color::White);

    // dialog.txt 파일 열기
    std::ifstream infile("dialog.txt");

    // 파일에서 한 줄씩 읽어와 출력
    std::string line;
    while (std::getline(infile, line))
    {
        text.setString(line);

        while (window.isOpen()) {      //윈도우가 열려있는 동안
            Event event;
            mouse_pos = Mouse::getPosition(window);

            //시작 버튼
            struct Button start_button;
            start_button.sprite.setTexture(&tex.start_btn_def);
            start_button.sprite.setSize(Vector2f(400, 120));
            start_button.sprite.setPosition(W_WIDTH / 2 - 200, 500);
            if (start_button.sprite.getGlobalBounds().contains(mouse_pos.x, mouse_pos.y)) {
                start_button.sprite.setTexture(&tex.start_btn_sel);
            }
            if (start_button.sprite.getGlobalBounds().contains(mouse_pos.x, mouse_pos.y) && Mouse::isButtonPressed(Mouse::Left)) {
                start_button.sprite.setTexture(&tex.start_btn_prs);
                layer = 1;
            }

            //종료 버튼
            struct Button quit_button;
            quit_button.sprite.setTexture(&tex.quit_btn_def);
            quit_button.sprite.setSize(Vector2f(400, 120));
            quit_button.sprite.setPosition(W_WIDTH / 2 - 200, 630);
            if (quit_button.sprite.getGlobalBounds().contains(mouse_pos.x, mouse_pos.y)) {
                quit_button.sprite.setTexture(&tex.quit_btn_sel);
            }
            if (quit_button.sprite.getGlobalBounds().contains(mouse_pos.x, mouse_pos.y) && Mouse::isButtonPressed(Mouse::Left)) {
                quit_button.sprite.setTexture(&tex.quit_btn_prs);

                return 0;
            }


            //플레이어 이동
            if (Keyboard::isKeyPressed(Keyboard::Left) && layer == 1) {
                view.move(-player.speed, 0);
                player.sprite.move(-player.speed, 0);
                if (hand == 0) {
                    player.sprite.setTexture(&tex.main_ch_left_x);
                }
                else if (hand == 1) {
                    player.sprite.setTexture(&tex.main_ch_left_o);
                }
                while (std::getline(infile, line))
                {
                    text.setString(line);
                    float x = (window.getSize().x - text.getGlobalBounds().width) / 2.0f;
                    float y = window.getSize().y - text.getGlobalBounds().height - 150.0;
                    text.setPosition(x, y);
                    dialogbox.setPosition(x-500, y-150);
                    // 윈도우에 출력
                    window.draw(dialogbox);
                    window.draw(text);
                  
                    window.display();

                    // 사용자 입력 대기
                    sf::Event event;
                    while (window.waitEvent(event))
                    {
                        if (event.type == sf::Event::Closed || event.type == sf::Event::KeyPressed)
                        {
                            
                            // 키를 누르면 다음 줄을 출력
                            break;
                        }
                    }
                }
            }
            if (Keyboard::isKeyPressed(Keyboard::Right) && layer == 1) {
                view.move(player.speed, 0);
                player.sprite.move(player.speed, 0);
                if (hand == 0) {
                    player.sprite.setTexture(&tex.main_ch_right_x);
                }
                else if (hand == 1) {
                    player.sprite.setTexture(&tex.main_ch_right_o);
                }
            }
            if (Keyboard::isKeyPressed(Keyboard::Up) && layer == 1) {
                view.move(0, -player.speed);
                player.sprite.move(0, -player.speed);
                if (hand == 0) {
                    player.sprite.setTexture(&tex.main_ch_back_x);
                }
                else if (hand == 1) {
                    player.sprite.setTexture(&tex.main_ch_back_o);
                }
            }
            if (Keyboard::isKeyPressed(Keyboard::Down) && layer == 1) {
                view.move(0, player.speed);
                player.sprite.move(0, player.speed);
                if (hand == 0) {
                    player.sprite.setTexture(&tex.main_ch_front_x);
                }
                else if (hand == 1) {
                    player.sprite.setTexture(&tex.main_ch_front_o);
                }
            }


            while (window.pollEvent(event)) {   //윈도우 창 닫기
                switch (event.type) {
                case Event::Closed:
                    window.close();
                    break;
                }

            }

            window.setView(view);

            window.clear(Color::Black);

            if (layer == 0) {
                window.draw(title);
                window.draw(start_button.sprite);
                window.draw(quit_button.sprite);
            }

            if (layer == 1) {
                window.draw(home);
                /*for (int i = 0; i < Map_WIDTH; i++) {
                   for (int j = 0; j < Map_HEIGHT; j++) {
                      window.draw(map[i][j].sprite);
                   }

                }*/

                window.draw(player.sprite);
            }

            window.display();
        }

    }
}
